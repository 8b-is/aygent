version: '3.8'

# ðŸš€ ST-AYGENT Production Stack
# "Production ready with pizzazz!" - Trisha from Accounting

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - feedback-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - feedback-net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  feedback-api:
    image: ghcr.io/8b-is/aygent-feedback-api:latest
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      API_KEY: ${FEEDBACK_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      FEEDBACK_DIR: /data/feedback
      STATS_DIR: /data/stats
      CONSENT_DIR: /data/consent
    volumes:
      - feedback_data:/data
    networks:
      - feedback-net
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  feedback-worker:
    image: ghcr.io/8b-is/aygent-feedback-worker:latest
    restart: unless-stopped
    environment:
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      GITHUB_REPO: ${GITHUB_REPO}
      FEEDBACK_API_URL: http://feedback-api:8000
      WORKER_NAME: ${WORKER_NAME:-worker-1}
      WORKER_CONCURRENCY: ${WORKER_CONCURRENCY:-4}
      BATCH_SIZE: ${BATCH_SIZE:-10}
      PROMETHEUS_PORT: 9090
    networks:
      - feedback-net
    depends_on:
      redis:
        condition: service_healthy
      feedback-api:
        condition: service_started

  # Nginx for SSL termination and routing
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    networks:
      - feedback-net
    depends_on:
      - feedback-api

  # Optional monitoring
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - feedback-net
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - feedback-net
    ports:
      - "3000:3000"
    depends_on:
      - prometheus

networks:
  feedback-net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  feedback_data:
  prometheus_data:
  grafana_data:
  nginx_cache: